#!/usr/local/bin/nodejs

require( __dirname + '/../lib/npm-utils.js' ).ensure_runtime( function( err ) {

    if ( err ) {
        console.log("Failed to start program: " + err );
    } else {

    function help() {

        console.log( [
            "",
            "Transcoding cloud user account utility",
            "Usage: ",
            "    user list",
            "    user add <description>",
            "    user update <account_id> <description>",
            "    user delete <account_id>",
            "    user set <account_id> notification_email [<email_address>]",
            "    user set <account_id> notification_url [<url>]",
            ""
        ].join("\n") );

        process.exit(1);
    }

    function error( reason ) {
        console.log( "ERROR: " + reason );
        process.exit(2);
    }

    function str_pad( str, length ) {
        str = str || '-';
        var strp = str.substr( 0, length );
        if ( str.length > length ) {
            strp = strp.substr( 0, length - 3 ) + '...';
        } else {
            
            while ( strp.length < length ) {
                strp += ' ';
            }
            
        }
        
        return strp;
    }   
    
    var cmd         = null,
        token       = null,
        description = null,
        field_name  = null,
        field_value = null,
        mysql       = require( 'mysql' ),
        db          = null,
        fs          = require( 'fs' ),
        Async       = require( __dirname + '/../lib/async.js' ).Async,
        tasker      = new Async(),
        pool        = null,
        conn        = null,
        crypto      = require( 'crypto' ),
        md5         = function( str ) {
            
            var hash = crypto.createHash( 'md5' );
            
            hash.update( str || '' );
            
            return hash.digest( 'hex' );
            
        };

    try {
    
        db = JSON.parse( fs.readFileSync( __dirname + '/../conf/database.json' ) + '' );
        
        if ( !( db instanceof Object ) )
            throw "Failed to properly decode database config from conf/database.json";
        
        if ( !db.host || !db.user || !db.pass || !db.database )
            throw "Errors in conf/database.json file!"; 

    } catch ( err ) {
        error( "Failed to initialize database: " + err );
    }

    // console.log( process.argv );


    switch ( true ) {
        case process.argv.length == 3 && process.argv[2] == 'list':
            cmd = 'list';
            break;
        
        case process.argv.length == 4 && process.argv[2] == 'add':
            cmd = 'add';
            description = process.argv[3];
            break;
        
        case process.argv.length == 4 && process.argv[2] == 'delete':
            cmd = 'delete';
            token = process.argv[3];
            break;
        
        case process.argv.length == 5 && process.argv[2] == 'update':
            cmd = 'update';
            token = process.argv[3];
            description = process.argv[4];
            break;
        
        case process.argv.length >= 5 && process.argv.length <= 6 &&
             process.argv[2] == 'set' &&
             [ 'notification_email', 'notification_url' ].indexOf( process.argv[4] ) >= 0:
             
             cmd = 'set';
             token = process.argv[3];
             field_name = process.argv[4];
             field_value= process.argv[5] || null;
             
             break;
        
        default:
            help();
            break;
    }

    function listUsers( conn, callback ) {
        
        var sql = "SELECT id, token, account_date, notification_url, notification_email, description FROM access";
        
        conn.query( sql, function( err, rows ) {
            
            if ( err ) {
                callback( "MySQL error: " + err );
            } else {
                
                if ( !rows.length )
                    console.log( "No accounts were found" );
                else {
                    console.log( [
                                "-----------------------------------------------------------------------",
                                ""
                        ].join( "\n" )
                    );  

                    for ( var i=0, len = rows.length; i<len; i++ ) {
                        console.log([
                                "account id        : " + rows[i].token,
                                "description       : " + ( rows[i].description || '<none>' ),
                                "notification_url  : " + ( rows[i].notification_url || '<none>' ),
                                "notification_email: " + ( rows[i].notification_email || '<none>' ),
                                "account_date      : " + ( rows[i].account_date ? rows[i].account_date : 'not_set' ),
                                "-----------------------------------------------------------------------",
                                ""
                            ].join( "\n" )
                        );
                    }
                }       

                callback( false );
            }
            
        } );
        
    }

    function addUser( conn, description, callback ) {
        
        var tok = null;
        
        var sql = "INSERT INTO access ( token, description ) VALUES ( '" +
                  ( tok = md5( ( new Date() ) + '-' + Math.random( ) + "-" + Math.random() ) ) + "'," +
                  conn.escape( description || 'no description' ) + ")";
        
        conn.query( sql, function( err, result ) {
            
            if ( err )
                callback( err );
            else {
                console.log( "\n" );
                console.log( "Creted account (api key): " + tok );
                console.log( "You can now pass this api key to your cloud client when uploading files.\n" );
                callback( false );
            }
            
        } );
        
    }   

    function updateUser( conn, token, description, callback ) {
        
        var sql = "UPDATE access SET description = " + conn.escape( description || 'no description' ) +
                  "WHERE token = " + conn.escape( token || '' );
        
        conn.query( sql, function( err, result ) {
            
            if  (err )
                callback( err );
            else {
                
                if ( result.affectedRows ) {
                    console.log( "Account id " + token + " updated successfully" );
                    callback( false );
                } else callback( "Account id " + token + " not found!" );
                
            }
            
        });
        
    }

    function deleteUser( conn, token, callback ) {
        
        conn.query( "DELETE FROM access WHERE token = " + conn.escape( token || '' ) + " LIMIT 1",
                    function( err, result ) {
                        
                        if ( err )
                            callback( err );
                        else {
                            if ( result.affectedRows ) {
                                console.log( "Account id " + token + " has been removed from the system" );
                                callback( false );
                            } else callback( "Account id " + token + " not found!" );
                        }
                    }
        );
        
    }

    function setupFeatures( conn, token, propertyName, propertyValue, callback ) {
        
        var sql = [
            "UPDATE access SET ",
            propertyName + " = " + ( propertyValue ? conn.escape( propertyValue ) : "NULL" ),
            "WHERE token=" + conn.escape( token ),
            "LIMIT 1"
        ].join( "\n" );
        
        conn.query( sql, function( err, result ) {
            
            if ( err )
                callback( err );
            else {
                
                if ( result.affectedRows ) {
                    console.log( "Property " + propertyName + " has been successfully updated for account id " + token );
                    callback( false );
                } else callback( "Account id " + token + " not found" );
            }
            
        } );
        
    }   

    tasker.sync( function() {
        
        // connect to databse...
        ( function( task ) {
            
            pool = mysql.createPool( {
                "host": db.host,
                "user": db.user,
                "password": db.pass,
                "database": db.database,
                "supportBigNumbers": true
            } );
            
            pool.getConnection( function( err, connection ) {
                
                if ( err )
                    task.on( 'error', 'failed to obtain a mysql connection: ' + err );
                else {
                    conn = connection;
                    task.on( 'success' );
                }
                
            } );
            
        } )( this );
        
    } );

    tasker.sync( function() {
    
        ( function( task ) {
        
            switch ( cmd ) {
            
                case 'list':
                    listUsers( conn, function( err ) {
                    
                        if ( err )
                            task.on( 'error', err );
                        else
                            task.on( 'success' );
                    
                    } );
                
                    break;
            
                case 'add':
                    addUser( conn, description, function( err ) {
                        if ( err )
                            task.on( 'error', err );
                        else
                            task.on( 'success' );
                    } );
                    break;
            
                case 'delete':
                    deleteUser( conn, token, function( err ) {
                        if ( err )
                            task.on( 'error', err );
                        else
                            task.on( 'success' );
                    });
                    break;
                
                case 'update':
                    updateUser( conn, token, description, function( err ) {
                        if ( err )
                            task.on( 'error', err );
                        else
                            task.on( 'success' );
                    });
                    break;
                
                case 'set':
                    setupFeatures( conn, token, field_name, field_value, function( err ) {
                        
                        if ( err )
                            task.on( 'error', err );
                        else
                            task.on( 'success' );
                        
                    });
                    
                    break;
                
                default:
                    task.on( 'success' );
                    break;
            }
            
        })( this );
        
    } );

    tasker.run( function() {}, function( reason ) { error( reason ); }, function() {
    
        if ( conn )
            conn.destroy();
        
    } );
    
    }
});
